* flow
** 考察する
** 計算量を確認する

* comment
** 組み合わせ
   factorizationが少なくなるような計算をすると良い
** 2分探索
** 事前計算
** order
O(f(N))が通るのは、f(N) <= 10**6 10**7
N <= 10**3, then O(N**2) O(N**2 * logN)

** 整数の割り算
//でやるとうまくいくかも
** ぴったりよりも以上以下のほうが早く判断できる
* input
** *A, = map(int, input().split())
A = list(map(int, input().split()))でよい
mapの出力はlistではないため
** Q = [[int(s) for s in input().split()] for _ in range(M)]
** 並列
#N M
#a_1 b_1 c_1
#...
#a_N b_N c_N
N, M = map(int, input().split())
P = [list(map(int, input().split())) for i in range(N)]
** 縦に並んだ文字列のリスト
A = [ int( input()) for_ in range(N)]
* data structure
** list
** set
<=などで比較が可能
** dictionary
** binary indexed tree(BIT)
Fenwick treeとも呼ばれる。BIT.py
* fundamental
** set
   set() 
   | 和集合、& 共通部分、-、差集合
   add remove clear
*** 重複が消せる
** 文字列について
*** 文字列でも[a:b]という操作が可能。おおよそlistと同じ扱いができる

** def
returnをしたらプログラム終了
** pow
pow(x, y[, z]) = x**y[%Z]
** sort
R.sort(key = lambda x:x[0], reverse=True)
** join
Bは数字の入ったlist
# B = [4,2,1,3]
print( ' '.join( list( map(str, B))))
# 4 2 1 3
* global
外の変数を使用できる
* module
** bisect
import bisect from bisect
X = [x_0, x_1,...] is sorted
bisect.bisect_left(X,a)番目に一番左に挿入できる
** deque
from collections import deque
両側キュー
d.append(left)() d.pop(left)
*** 幅優先全探索
** Counter
from collections import Counter
Counter(d)[]

** deepcopy
from copy import deepcopy
リストの扱いには注意しようb
https://qiita.com/utgwkk/items/5ad2527f19150ae33322
** itertools
from itertools import hoge
|                               | listとして表示した               |                          |
| product(range(2),repeat = 2)  | [(0, 0), (0, 1), (1, 0), (1, 1)] | 直積                     |
| permutations(range(2),2)      | [(0, 1), (1, 0)]                 | 重複なしのあらゆる並び   |
| combinations(range(2),2)      | [(0, 1)]                         | ソートされた順で重複なし |
| combinations_with_replacement | [(0, 0), (0, 1), (1, 1)]         | ソートされた順で重複あり |
出力がemptyの場合はemptyが出力される
** maximum
numpy.maximum
これを使ってdp?
** numpy
|ceil|切り上げ|
** defaultdict
from collection import defaultdict
https://qiita.com/xza/items/72a1b07fcf64d1f4bdb7
d = defaultdict(int)
初期値として0を持っているもの。
上のやつと次のやつは同じ
def constant_factory(value):
    return lambda: 0
d = defaultdict(constant_factory(0))
** heapq
import heapq
A = [list] あるいはtupleで整理することもできる。よく使う。
heapq.heapify(H) heap型にする
a = heapq.heappop(H) 取り出す
heapq.heappush(H, hoge) 追加a=はいらない
* search method
** 2分木探索
   binary_search_tree.py

** bfs
確定した値を記入する
** dijkstra
def dijkstra(graph, start):
    #graph = [ dict() for _ in range(n)]
    dist = [ 10**14 for _ in range(n)] #nは頂点数
    dist[start] = 0
    q = [(0,start)]
    while q:
        l, v = heapq.heappop(q)
        if dist[v] < l: #最小でない距離もheapに含まれている
            continue
        for u, d in graph[v].items(): #.items()はdictを表示する
            #ここでgraphのとり方が聞いてくる            
            if dist[u] > l+d:
                dist[u] = l+d
                heapq.heappush(q, (dist[u], u))
    return dist
* search
nCk order(logN)
dict

* nigate
| ABC078C |   |
* naruhodo
** ABC105D 
N 個の箱が左右一列に並んでおり、左から i 番目の箱には Ai個のお菓子が入っています。
あなたは、連続したいくつかの箱からお菓子を取り出して M人の子供たちに均等に配りたいと考えています。
そこで、以下を満たす組 (l,r)の総数を求めてください。
l,rはともに整数であり 1≤l≤r≤Nを満たす
Al+Al+1+...+Arは M の倍数である
** ABC064D
文字列sが括弧列である⇔文字列sの'('の個数と')'の個数が同じかつ任意の接頭辞に置いても'('の個数が')'の個数以上である
* git
** 初めてのとき
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:kamojiro/pythonstudy.git
git push -u origin master
** 2回目以降
gitpushでできるようにした
*** gitpush.shの中身
#!/bin/bash
git diff
git add .
git status
echo -n comment:
read str
git commit -m $str
git push -u origin master
* daemon
nohup python hoge.py &
nohup python hoge.py > ~/output_log/put.log &
